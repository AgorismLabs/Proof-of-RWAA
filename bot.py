import os

from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes


async def hello(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # TODO: reply text generated by LLM here
    await update.message.reply_text(f'Hello {update.effective_user.first_name}')


async def connect(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # TODO: link to connect wallet
    # TODO: reply text generated by LLM here
    await update.message.reply_text(f'Under construction {update.effective_user.first_name}')


async def water(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # TODO: reply text generated by LLM here
    await update.message.reply_text(f'Under construction {update.effective_user.first_name}')


async def recycle(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # TODO: reply text generated by LLM here
    await update.message.reply_text(f'Under construction {update.effective_user.first_name}')


async def bye(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # TODO: reply text generated by LLM here
    await update.message.reply_text(f'Under construction {update.effective_user.first_name}')

async def help(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # TODO: reply text generated by LLM here
    await update.message.reply_text('\n'.join((
        'commands overview:',
        '',
        '/help - this',
        '/hello - greetings',
        '/connect - connect your wallet',
        '/water - request water delivery, stay hydrated',
        '/recycle - recycle your bottle, be responsible',
        '/bye - good bye and see you again!',
    )))

app = ApplicationBuilder().token(os.environ["BOT_TOKEN"]).build()

app.add_handler(CommandHandler("hello", hello))
app.add_handler(CommandHandler("connect", connect))
app.add_handler(CommandHandler("water", water))
app.add_handler(CommandHandler("recycle", recycle))
app.add_handler(CommandHandler("bye", bye))

app.run_polling()
